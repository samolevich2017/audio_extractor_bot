from email import message
import logging
from pyexpat.errors import messages
import config
from aiogram import Bot, Dispatcher, executor, types
from classes import yt_extractor as yt
from sqlighter import SQLighter
import os

# configure logging
logging.basicConfig(level=logging.INFO)

# init Bot and Dispatcher
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot)

# initializing connection with database
db = SQLighter('data/data_base.db')

# initializing object for YouTube extractor
yt_ext = yt.YT_Extractor()

# function wich will be check - user already exists in db or not 
# and switch subscription status 
def isSubscribe(message):
    if(not db.user_exists(message.from_user.id)):
        # if user is not exists in db, adding him with subscription status ON
        db.add_user(message.from_user.id, message.from_user.full_name, True)
    else:
        # if user already exists in db, update his subscription status 
        db.update_subscribe(message.from_user.id, True)


# Welcome command which will be adding user if him is a new
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    # process checking subscribe
    isSubscribe(message)

    # send message 1
    await message.answer("–ü—Ä–∏–≤–µ—Ç, " + str(message.from_user.first_name) + " üòâ\n–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç, —è –ø–æ–∫–∞ –Ω–µ —Å–∫–∞–∂—É, –ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ω –Ω–µ –ø—Ä–∏–¥—É–º–∞–ª –º–Ω–µ –∏–º–µ–Ω–∏. ü•∫")
    # send message 2
    await message.answer("–ú–æ—è —Ä–∞–±–æ—Ç–∞ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ —è –±—É–¥—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ –≤–∏–¥–µ–æ —Å YouTube –≤ –∞—É–¥–∏–æ —Ñ–æ—Ä–º–∞—Ç. üéß")
    # send message 3
    await message.answer("–ü—Ä–æ—Å—Ç–æ –∫–∏–Ω—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å YouTube, –∞ —è —Ç–µ–±–µ –≤–µ—Ä–Ω—É –µ–≥–æ –∞—É–¥–∏–æ üòá") 


# Function listener - listen to all messages and process these
@dp.message_handler()
async def link_listener(message: types.Message):
    try:
        # if we need works with YouTube video
        if('https://www.youtube.com/' in message.text or 'https://youtu.be/' in message.text):
           
            # we ask awaiting for one second
            await message.answer("–û–¥–Ω—É —Å–µ–∫—É–Ω–¥—É üòã")
            
            # getting a link from the message
            url = message.text 
            
            # extract audio from video and get the path to mp3 file
            audio_path = yt_ext.extract(url) 
            
            # send the audio to the user and then remove it
            await message.answer_audio(audio=open(audio_path, "rb"))
            os.remove(audio_path)
        else:
            await message.answer("–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–æ —Ç—ã –º–Ω–µ –∫–∏–¥–∞–µ—à—å üòï")
            await message.answer("–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∏ YouTube üòá")
        
    except Exception as ex:
        print(ex)
        await message.answer("–ü—Ä–æ—Å—Ç–∏, –Ω–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... üòû")
        await message.answer(f"–°–æ–æ–±—â–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–± —ç—Ç–æ–º –º–æ–µ–º—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É üëá \n{config.BOT_OWNER}")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

